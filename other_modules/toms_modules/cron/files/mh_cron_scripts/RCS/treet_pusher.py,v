head	1.9;
access;
symbols;
locks; strict;
comment	@# @;


1.9
date	2010.06.07.14.24.12;	author wflynn;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.24.18.37.04;	author wflynn;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.06.14.50.54;	author wflynn;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.15.21.07.22;	author wflynn;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.24.15.24.28;	author wflynn;	state Exp;
branches;
next	1.4;

1.4
date	2009.02.17.20.08.35;	author wflynn;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.22.16.42.12;	author wflynn;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.17.17.14.34;	author wflynn;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.15.19.04.31;	author wflynn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Checking in and Unlocking, due to JJoy's email :)
@
text
@#!/usr/bin/python -O
#
# Framework for delivering email to members
# Treet: It's like spam, but its not.
#
# http://en.wikipedia.org/wiki/Treet
#
# $Id: treet_pusher.py,v 1.8 2009/08/24 18:37:04 wflynn Exp wflynn $
#
import sys, smtplib, MimeWriter, base64, StringIO
from optparse import OptionParser

SMTPSERVER = 'localhost'
SENDER = 'notifications@@manhunt.net'
RECIPIENT = 'care@@online-buddies.com'
TEMPLATEDIR='/usr/local/manhunt/treet_templates'
MONITOR = 'donotreply@@manhunt.net'
ERRORSTO = 'notification-errors@@manhunt.net'

try:
    sys.path.append(TEMPLATEDIR)
except:
    print "Don't know where to find any templates:", sys.exc_info()[:2]
    raise

def send_msg(username="MANHUNTServiceMan", userid="1", language="en", email=[RECIPIENT], template=None, subject=None, filename=None):
    if template:
        (message_subject, message_body) = get_content(language, template)
    elif (subject and filename):
        message_subject = subject
        try:
            message_body=open(filename).read()
        except:
            print "Unexpected File Read error:", sys.exc_info()[:2]
            raise
    else:
        print "No content specified. Exiting."
        sys.exit(2)

    message = StringIO.StringIO()
    writer = MimeWriter.MimeWriter(message)
    writer.addheader('MIME-Version', '1.0')
    writer.addheader('Content-Language', language)
    writer.addheader('Errors-To', ERRORSTO)
    writer.addheader('Reply-To', MONITOR)
    writer.addheader('Subject', message_subject)
    writer.addheader('To', email)
    writer.addheader('X-MH-UID', str(userid))
    writer.startmultipartbody('mixed')

    # start off with a text/plain part
    part = writer.nextpart()
    body = part.startbody('text/plain')
    body.write(message_body)

#     # How one would ad further encoded content:
#     part = writer.nextpart()
#     part.addheader('Content-Transfer-Encoding', 'base64')
#     body = part.startbody('image/jpeg; name=kitten.jpg')
#     base64.encode(open('kitten.jpg', 'rb'), body)

    # finish off
    writer.lastpart()

    # deliver it
    deliver_msg(email, message)


def deliver_msg(recipients, message=None):
    if __debug__:
        # print it
        print "To:\n%s\n" % str(recipients)
        print "Message:\n%s\n" % message.getvalue()
    else:
        # send it
        smtp = smtplib.SMTP(SMTPSERVER)
        try:
            smtp.sendmail(SENDER, recipients, message.getvalue())
        except:
            print "Unexpected SMTP error:", sys.exc_info()[:2]
            raise
        smtp.quit()

def get_content(language="en", contentfile=None):
    try:
        content = __import__(contentfile).content
    except:
        raise
    try:
        subject = __import__(contentfile).subject
    except:
        raise
    if language in content:
        msg_body=content[language]
    else:
        msg_body=content["en"]
    if language in subject:
        msg_subj=subject[language]
    else:
        msg_subj=subject["en"]

    return(msg_subj, msg_body)

def main():
    usage = "usage: %prog [options]\n\tNote: --template or --subject and --filename are mutually exclusive\n\tMulti-word subjects must be quoted"
    parser = OptionParser(usage)
    parser.add_option("-e", "--email", dest="email", help="user's EMAIL")
    parser.add_option("-f", "--filename", dest="filename", help="single message content FILENAME")
    parser.add_option("-i", "--userid", dest="userid", help="user's USERID")
    parser.add_option("-l", "--language", dest="language", default="en", help="user's LANGUAGE")
    parser.add_option("-s", "--subject", dest="subject", help="single message SUBJECT")
    parser.add_option("-t", "--template", dest="template", help="email content TEMPLATE")
    parser.add_option("-u", "--username", dest="username", help="user's USERNAME")
    (options, args) = parser.parse_args()

    if not (options.username and options.userid and options.language and options.email and (options.template or (options.filename and options.subject))):
        parser.print_help()
        sys.exit(2)
    else:
        send_msg(options.username, options.userid, options.language, options.email, options.template, options.subject, options.filename)
    sys.exit()

if __name__ == "__main__":
    main()
@


1.8
log
@Make sender be "notifications@@manhunt.net": SYS-1805
@
text
@d8 1
a8 1
# $Id: treet_pusher.py,v 1.7 2009/07/06 14:50:54 wflynn Exp wflynn $
d47 1
@


1.7
log
@Added "Errors-To" header.  SYS-1805
@
text
@d8 1
a8 1
# $Id: treet_pusher.py,v 1.6 2009/05/15 21:07:22 wflynn Exp wflynn $
d14 1
a14 1
SENDER = 'support@@manhunt.net'
@


1.6
log
@Added reply-to header SYS-1687
@
text
@d8 1
a8 1
# $Id: treet_pusher.py,v 1.5 2009/03/24 15:24:28 wflynn Exp wflynn $
d18 1
d44 1
@


1.5
log
@Change userid header to X-MH-UID SYS-1464
@
text
@d8 1
a8 1
# $Id: treet_pusher.py,v 1.4 2009/02/17 20:08:35 wflynn Exp wflynn $
d17 1
d43 2
a45 1
    writer.addheader('Subject', message_subject)
@


1.4
log
@Fixed typo to MANHUNTServiceMan
@
text
@d8 1
a8 1
# $Id: treet_pusher.py,v 1.3 2008/12/22 16:42:12 wflynn Exp wflynn $
d42 1
a42 1
    writer.addheader('X-MH-USERID', str(userid))
@


1.3
log
@Support supplying a subject and filename on the command line, for situations
where using a template isn't necessary/practical.  SYS-1038
@
text
@d8 1
a8 1
# $Id: treet_pusher.py,v 1.2 2008/12/17 17:24:34 wflynn Exp $
d24 1
a24 1
def send_msg(username="ManuntServiceMan", userid="1", language="en", email=[RECIPIENT], template=None, subject=None, filename=None):
@


1.2
log
@Changed the default sender and a header  SYS-1113
@
text
@d8 1
a8 1
# $Id: treet_pusher.py,v 1.1 2008/12/15 19:04:31 wflynn Exp wflynn $
d21 1
a21 1
    print "Don't know where to find any templates:", sys.exc_info()[0]
d24 14
a37 2
def send_msg(username="ManuntServiceMan", userid="1", language="en", email=[RECIPIENT], template=None):
    (message_subject, message_body) = get_content(language, template)
a49 3
    if __debug__:
        print message_subject
        print message_body
d63 1
d65 13
a77 8
    # send the mail
    smtp = smtplib.SMTP(SMTPSERVER)
    try:
        smtp.sendmail(SENDER, recipients, message.getvalue())
    except:
        print "Unexpected SMTP error:", sys.exc_info()[0]
        raise
    smtp.quit()
d100 1
a100 1
    usage = "usage: %prog [options]"
d103 1
d106 1
d110 2
a111 2
    
    if not (options.username and options.userid and options.language and options.email and options.template):
d115 1
a115 1
        send_msg(options.username, options.userid, options.language, options.email, options.template)
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
# $Id: $
d14 1
a14 1
SENDER = 'care@@online-buddies.com'
d29 1
a30 1
    writer.addheader('X-MH-LANGUAGE', language)
@
