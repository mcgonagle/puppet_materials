Puppet module: nagios

# Written by Lab42 #
# http://www.Example42.com

Licence: GPLv3

DESCRIPTION:
This module installs, configures and manages nagios.
It requires storeconfigs to automatically manage hosts and services checks.
It's based on ideas and code found in different public modules available online.
Particular credits di David Schmitt's nagios module.
Standard and extended classes are available.

In order to have functionality and keep cross-os compliance (at least on Debian/Ubuntu/RedHat)
without getting lost in the different configuration layout of the Nagios packages in these distros, 
the design choice has been to define in the same module all the configurations needed, overriding the
logic (mostly for config files inclusion) of the different distros.
SO, in order to adapt the behaviour of this module to your needs, take a look and modify the templates provided.

USER VARIABLES:
In order to customize the behaviour of the module you can set the following variables:
$nagios_check_external_commands (default "no") - Set to "yes" if you want to enable Nagios external commands 
                                                 (Needed to issue commands from the Web UI)
$nagios_grouplogic (default undef) - Set here the name of a variable you want to use as discriminator for Nagios server monitoring.
                                     For example you may want to have different Nagios servers for prod/test/devel nodes.
                                     If this status is defined by a variable called "$env", set $nagios_grouplogic=env to have 
                                     3 different (automatically configured) Nagios servers for prod/test/devel nodes.
                                     By default all the checks got to the same server (managed by the same PuppetMaster).
                                     Check in nagios/manifests/params.pp if this "grouplogic" variable is already proposed in the
                                     selector for $nagios_grouptag if not, you just have to add it there.
$nagios_plugins (default yes) : Include extra custom nagios plugins
$nagios_use_ssl (default "yes") - Set to no if you need to disable SSL in Nagios-NRPE communication

USAGE:
# Standard Classes 
include nagios              # Install and run nagios (use this on Nagios server) 
include nagios::disable     # Disable nagios service.
include nagios::disableboot # Disable nagios service at boot time, but don't stop if it's running.
include nagios::absent      # Remove nagios package.

# Extended Classes (generally require storeconfigs)
include nagios::monitor     # Monitor nagios - Automatically included if $monitor=yes - Requires Example42's monitor module
include nagios::backup      # Backup nagios data - Automatically included if $backup=yes - Requires Example42's backup module
include nagios::firewall    # Manages firewall rule for nagios service - Automatically included if $firewall=yes - Requires Example42's firewall module

# Generic define to set parameters in the main configuration file. EXPERIMENTAL.
nagios::conf { "ParameterName": value="YourValue"} # Generic 

# Module specific classes
On hosts that have to be monitored you have to:
include nagios::target

# Module specific defines
nagios::host - Use this define, as alternative to "include nagios::target" for more customized options to define a Nagios host object
nagios::service - Use this to define Nagios service objects
nagios::command - Use this to define Nagios commands
nagios::plugin - Adds a custom plugin (source provided via Puppet)

GENERAL VARIABLES:
Example42 modules collection uses some general variables that can influence the behaviour of this module.
You can happily live without considering or setting them, but they can be useful to manage different projects maintanining the module's resuability. 
$my_project - If set, permits you to alter and customize the module behaviour in custom project classes
$my_project_onmodule - If set to yes your project classes are looked in a dedicated project module:
  - $my_project_onmodule not set -> Module autoloads nagios::$my_module (MODULEPATH/nagios/manifests/$my_project.pp)
  - $my_project_onmodule == yes -> Module autoloads $my_module::nagios (MODULEPATH/$my_project/manifests/nagios.pp)
$base_source - Let you define an alternative source for static files:
  - $base_source not set -> Files are looked in puppet://$servername/ (the PuppetMaster)
  - $base_source set -> Files are looked in $base_source ( could be puppet://$servername/$my_module ) 
  Note that the module automatically manages the different paths for Puppet pre 0.25
  

DEPENDENCIES:
Standard classes generally don't need external modules.
Extended classes need the relevant external modules (import monitor ; import backup ... ) and the "common" module (import common)
nagios::conf generic infile configuration define needs the "common" module
Check on individual module specific classes and defines if there are specific requirements.
