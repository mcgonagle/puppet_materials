Puppet module: munin

# Written by Lab42 #
# http://www.Example42.com

Licence: GPLv3

DESCRIPTION:
This module installs and manages munin.
Standard and Example42 extended classes are available.
Generally you can easily import and use standard classes in your own modules set, without other Example42 modules.
You can place your customizations in the dedicated "project" files (by default example42.pp, use the example42_project_rename.sh script to rename them).
Decide and customize how you want to define configuration files: static files, templates, infile modifications...


USER VARIABLES:
$munin_server : IP address (NOT fqdn) of the Munin grapher/gatherer. Can be an array of different IPs
$munin_server_local : (Default undef) - Set to true to have the grapher/gatherer on the local machine
$munin_grouplogic (default undef) - Set here the name of a variable you want to use as discriminator for Munin monitoring.
                                    For example you may want to have different Munin servers for prod/test/devel nodes.
                                    If this status is defined by a variable called "$env", set $munin_grouplogic=env to have 
                                    3 different (automatically configured) Munin servers for prod/test/devel nodes.
                                    By default all the checks got to the same server (managed by the same PuppetMaster).
                                    Check in munin/manifests/params.pp if this grouping variable is already proposed in the
                                    selector for $munin_grouplogic if not, you just have to add it there.
$munin_plugins (default no) : Include extra custom munin plugins


USAGE:
# Standard Classes 
include munin              # Install and run munin 
# if ($munin_server_local == "yes") or ($munin_server == "$ipaddress") Munin grapher/gatherer is automatically installed

include munin::disable     # Disable munin service.
include munin::disableboot # Disable munin service at boot time, but don't stop if it's running.
include munin::absent      # Remove munin package.
include munin::debug       # Used for debugging purposes (not resource hungry) - Automatically included if $debug=yes - Requires Example42's puppet module

# Extended Classes (generally require storeconfigs)
include munin::monitor     # Monitor munin - Automatically included if $monitor=yes - Requires Example42's monitor module
include munin::backup      # Backup munin data - Automatically included if $backup=yes - Requires Example42's backup module
include munin::firewall    # Manages firewall rule for munin service - Automatically included if $firewall=yes - Requires Example42's firewall module

# Generic define to set parameters in the main configuration file. EXPERIMENTAL.
munin::conf { "ParameterName": value="YourValue"} # Generic 

# Module specific classes
include munin::server - Setup of the Munin Grapher/Collector - Autoloaded if $munin_server_local = "yes"
include munin::plugins - Installation of extra custom Munin plugins - Autoloaded if $munin_plugins = "yes"

# Module specific defines
munin::plugin - Adds a custom Munin plugin


EXAMPLES:

node munin.example42.com {
    $munin_server = ["10.42.42.12","10.42.40.12"] # The IP of the Munin server(s). Can be an array or a variable.
    $munin_grouplogic = "env" # Optional. You have different munin servers, one for each value of custom variable $env 
    $munin_plugins = "yes" # Optional. Add custom plugins
    $munin_server_local = "yes" # Necessary on server. Use this on the Munin server (Grapher/Collector)

    include munin
}

node any.example42.com {
    $munin_server = ["10.42.42.12","10.42.40.12"] # Can be an array or a variable
    $munin_grouplogic = "env" # Optional. You have different munin servers, one for each value of custom variable $env
    $munin_plugins = "yes" # Optional. Add custom plugins

    include munin
}


GENERAL VARIABLES:
Example42 modules collection uses some general variables that can influence the behaviour of this module.
You can happily live without considering or setting them, but they can be useful to manage different projects maintanining the module's resuability. 
$my_project - If set, permits you to alter and customize the module behaviour in custom project classes
$my_project_onmodule - If set to yes your project classes are looked in a dedicated project module:
  - $my_project_onmodule not set -> Module autoloads munin::$my_module (MODULEPATH/munin/manifests/$my_project.pp)
  - $my_project_onmodule == yes -> Module autoloads $my_module::munin (MODULEPATH/$my_project/manifests/munin.pp)
$base_source - Let you define an alternative source for static files:
  - $base_source not set -> Files are looked in puppet://$servername/ (the PuppetMaster)
  - $base_source set -> Files are looked in $base_source ( could be puppet://$servername/$my_module ) 
  Note that the module automatically manages the different paths for Puppet pre 0.25
  

DEPENDENCIES:
Standard classes generally don't need external modules.
Extended classes need the relevant external modules ( monitor ; backup ... ) and the "common" module.
munin::conf generic infile configuration define needs the "common" module
Check on individual module specific classes and defines if there are specific requirements.
