Puppet module: mcollective

# Written by Lab42 #
# http://www.Example42.com

Licence: GPLv3
The included mcollective-plugins ( obtained via http://github.com/ripienaar/mcollective-plugins ) are released under GPLv2 unless stated otherwise in individual plugins.

DESCRIPTION:
This module installs and manages mcollective (client and server).
Standard and extended classes are available.
This module has been inspired by Mike Pountney's mcollective module: http://github.com/mikepea/puppet-module-mcollective

USER VARIABLES:
In order to customize the behaviour of the module you can set the following variables:
$mcollective_psk (default: "mcollective") - PreSharedKey used for client-server communication
$mcollective_stomp_host (default: "stomp.example42.com") - Hostname of the Stomp server.
$mcollective_stomp_port (default: "6163") - Listening port of the Stomp server (this variable is used also on the activemq module)
$mcollective_stomp_user (default: "mcollective") - User for communication with the Stomp server (this variable is used also on the activemq module)
$mcollective_stomp_password (default: "mcollective") - Password for communication with the Stomp server (this variable is used also on the activemq module)

By default when you include this module you include the server components with the extra plugin.
You can modify this behaviour with the following variables:
$mcollective_client="yes" : Include client components (from the client you can orchestrate the whole MCollective infrastructure)
$mcollective_server="no"  : DO NOT include server components. Use this variable, with $mcollective_client="yes" to have a client outside the infrastructure
$mcollective_plugins="no" : Disable extra plugins autoloading

USAGE:
# Standard Classes 
include mcollective              # Install and run mcollective server

include mcollective::disable     # Disable mcollective service.
include mcollective::disableboot # Disable mcollective service at boot time, but don't stop if it's running.
include mcollective::absent      # Remove mcollective package.

# Extended Classes (generally require storeconfigs) 
include mcollective::monitor     # Monitor mcollective - Automatically included if $monitor=yes - Requires Example42's monitor module
include mcollective::backup      # Backup mcollective data - Automatically included if $backup=yes - Requires Example42's backup module
include mcollective::firewall    # Manages firewall rule for mcollective service - Automatically included if $firewall=yes - Requires Example42's firewall module

# Generic define to set parameters in the main configuration file. EXPERIMENTAL.
mcollective::conf { "ParameterName": value="YourValue"} # Generic 

# Module specific classes

# Module specific defines


GENERAL VARIABLES:
Example42 modules collection uses some general variables that can influence the behaviour of this module.
You can happily live without considering or setting them, but they can be useful to manage different projects maintanining the module's resuability. 
$my_project - If set, permits you to alter and customize the module behaviour in custom project classes
$my_project_onmodule - If set to yes your project classes are looked in a dedicated project module:
  - $my_project_onmodule not set -> Module autoloads mcollective::$my_module (MODULEPATH/mcollective/manifests/$my_project.pp)
  - $my_project_onmodule == yes -> Module autoloads $my_module::mcollective (MODULEPATH/$my_project/manifests/mcollective.pp)
$base_source - Let you define an alternative source for static files:
  - $base_source not set -> Files are looked in puppet://$servername/ (the PuppetMaster)
  - $base_source set -> Files are looked in $base_source ( could be puppet://$servername/$my_module ) 
  Note that the module automatically manages the different paths for Puppet pre 0.25
  

DEPENDENCIES:
Standard classes don't need external modules.
Extended classes need the relevant external modules ( monitor ; backup ... ) and the "common" module.
