Puppi: A Pluggable Deploy Automation and SysAdmin helper Puppet module

# Written by Lab42 #
# http://www.example42.com

Licence: GPLv3

Puppi is a Puppet module that lets sysadmins manage and automate the deployment of applications
and provides quick and standard commands to obtain informations about the system and 
what's is going on it.
Its structure provides FULL flexibility on the actions required for virtually any kind of
application deployment and information gathering.
The module provides:
- The puppi command and its whole working environment
- A set of scripts that can be used in chain to automate any kind of deployment
- Puppet defines that make it easy to prepare a puppi set of commands for a project deployment

USAGE OF THE PUPPI COMMAND
puppi <command> <project_name> [ -options ]
The puppi command has these possibile actions:
- puppi init <project_name> : First time initialization of the defined project
- puppi deploy <project_name> : Deploys the defined project
- puppi rollback <project_name> : Rollback to a previous deploy state 
- puppi check [project_name] : Runs project specific and host wide checks 
- puppi log [project_name] : Tails system wide or project specific logs 
- puppi info [topic] : Show system information (for all or only the specified topic)
- puppi todo [topic] : Show things to do (or done) manually on the system
For most of these actions puppi runs the commands in /etc/puppi/projects/$project_name/$action,
logs their status and then runs the commands in /etc/puppi/projects/$project_name/report to
provide reporting, in whatever, pluggable, way.
You can also provide some options:
-f : Force puppi commands execution also on CRITICAL errors
-i : Interactively ask confirmation for every command
-t : Test mode. Just show the commands that should be executed without doing anything
-d <yes|full>: Debug mode. Show debugging info during execution
-o "parameter=value parameter2=value2" : Set manual options to override defaults. The options 
  must be in parameter=value syntax, separated by spaces and inside double quotes.

Some usage examples:
puppi check : Run host-wide checks. 
puppi check myapp : Run project "myapp" specific tests AND host-wide checks
puppi log : Show system logs
puppi todo : Show what has to be done manually on the system to complete the setup
puppi info : Show general system infos (outputs all the topics available)
puppi info network : Show network related info (outputs only the "network" topic)
puppi init myapp : Make the first deploy of "myapp". Can be optional.
puppi deploy myapp : Deploys myapp with the standard logic/parameters defined in Puppet
puppi deploy myapp -f : Deploys myapp and doesn't stop in case of Critical errors
puppi deploy myapp -i : Deploys myapp in interactive mode. Confirmation is asked for each step
puppi deploy myapp -t : Test mode. Just show the commands that would be executed
puppi deploy myapp -d full : Deploys myapp with full debugging output
puppi deploy myapp -i -o "version=1.1 source_url=http://dev.example42.com/code/my_app/" : Deploys
  myapp in interactive mode and sets some custom options that override the standard Puppet params.
  Note that these parameters change according to the script you use (and the scripts must honour
  this override in order to make this option work).
puppi rollback myapp : Rollbacks myapp to a previous archived state. User is asked to choose which
  deploy to override

The set of commands needed for a specific kind of deploy is entirely managed with specific
Puppet "basic defines".

FILE PATHS (all of them are provided, and can be configured, in the puppi module):
/usr/sbin/puppi - Where the puppi command is placed. Currently is a bash script.
/etc/puppi/puppi.conf - Puppi main config file. Here various puppi wide paths are defined
/etc/puppi/checks/ - $checksdir - Here can be placed all the host wide checks. If you use the
  Example42 monitor module and have "puppi" as $monitor_tool, this directory is automatically
  filled with Nagios plugins based checks.
/etc/puppi/projects/ - $projectsdir - In this directory you can have one or more projects
  subdirs, with the commands to be run for deploy, rollback and check actions.
  They are completely built (and purged) by the Puppet module.
/etc/puppi/scripts/ - $scriptsdir - The general-use scripts directory, these are used by the
  above commands and may require one or more arguments.
/etc/puppi/logs/ - $logssdir - The general-use directory where are placed files containing
  the log paths to be used by puppi log
/etc/puppi/info/ - $infodir - The directory where are placed files containing the commands
  used by puppi info
/var/lib/puppi/archive/ - $archivedir - Where all data to rollback is placed.
/var/lib/puppi/archive/ - $archivedir - Where all data to rollback is placed.
/var/log/puppi/ - $logdir - Where logs and reports of the different commands are placed.
/tmp/puppi/ - $workdir - Temporary, scratchable, directory where Puppi places temporary files.
/tmp/puppi/$project/config - A runtime configuration file, where are dinamically placed
  variables usable by all the scripts invoked by puppi. This is necessary to mantain "state"
  information that changes on every puppi run (such as the deploy datetime, used for backups).

USAGE OF THE PUPPI MODULE
The puppi module provides few basic defines to manage puppi's setup elements and some example
templates that use these defines to build deployment workflows.
The basic defines are:
puppi::project  - Creates the main project structure. One or more different deployment projects
                  can exist on a node.
puppi::initialize - Creates a single command to be placed in the init sequence.
                  It's not required for every project.
puppi::deploy   - Creates a single command to be placed in the deploy sequence.
                  More than one is generally needed for each project.
puppi::rollback - Creates a single command to be placed in the rollback sequence.
                  More than one is generally needed for each project.
puppi::check    - Creates a single check (based on Nagios plugins) for a project or for the
                  whole host (host wide checks are auto generated by Example42 monitor module)
puppi::report   - Creates a reporting command to be placed in the report sequence.
puppi::log      - Creates a log filename entry for a project or the whole hosts.
puppi::info     - Creates an info entry with the commands used to provide info on a topic

The above init, deploy, rollback, check and report defines have generally a standard structure and
similar arguments. Every one is reversable (enable => false) but you can wipe out the whole
/etc/puppi directory to have it rebuilt from scratch.
Here is an example for a deploy command:
puppi::deploy { "Retrieve files":       # The $name of the define is used in the file name
    command  => "get_curl.sh",          # The name of the general-use script to use 
    argument => "file:///storage/file", # The argument(s) passed to the above script
    priority => "10",                   # Lower priority scripts are executed first
    user     => "root",                 # As what user we run the script
    project  => "my-web.app",           # The name of the project to use
}
This define creates a file named /etc/puppi/projects/${project}/deploy/${priority}-${name}
Its content is, simply:
su - ${user} -c "export project=${project} && /etc/puppi/scripts/${command} ${arguments}"

You can glue together, with the desired order according to the priority argument, different
basic defines to create a complex project template and use this in you modules.
For example, for a simple deployment of a WAR you can use, on the desired node, a define like:
puppi::project::war { "myapp": # The name of the project
    source_url   => "http://repository.example42.com/projects/myapp/latest/myapp.war",
    user         => "myappuser",
    deploy_root  => "/store/tomcat/myapp/webapps",
    report_email => "release@example42.com",
    enable       => "true",
}

Check the manifests/project/ dir for different examples of deploy templates.
See there how you can influence the deploy sequence according to the usage of custom arguments.

HOW TO CUSTOMIZE
It should be clear that with puppi you have full flexibility in the definition of a deployment 
procedure, since the puppi command is basically a wrapper that executes arbitrary scripts with
a given sequence, in pure KISS logic.
The advantanges though, are various:
- You have a common syntax to manage deploys and rollbacks on an host
- In your Puppet manifests you can set in simple, coherent and still flexible and customizable
  defines all the elements you need for your application deployments. 
  Think about it: with just a Puppet define you build the whole deploy logic
- Reporting for each deploy/rollback is built-in and extensible 
- Automatic checks can be built in the deploy procedure
- You have a common, growing, set of general-use scripts for typical actions
- You have quick and useful command to see what's happening on the system (puppi check, log, info)
- Future planned support for mcollective and a web front-end will make everything funnier

There are different parts where you can customize the behaviour of puppi:
- The set of general-use scripts in /etc/puppi/scripts/ ( this dir is filled with the content
  of puppi/files/scripts/ ) can/should be enhanced. These can be arbitrary scripts in whatever
  language. If you want to follow puppi's logic, though, consider that they should import the
  common and runtime configuration files and have an exit code logic similar to the one of
  Nagios plugins: 0 is OK, 1 is WARNING, 2 is CRITICAL. Note that by default a script that 
  exits with WARNING doesn't block the deploy procedure, on the other hand, if a script exits
  with CRITICAL (exit 2) by default it blocks the procedure.
  Take a second, also, to explore the runtime config file created by the puppi command that
  contains variables that can be set and used by the scripts invoked by puppi.
- The custom project defines that describe deploy templates. These are placed in
  puppi/manifests/project/ and can request all the arguments you want to feed your scripts with.
  Generally is a good idea to design a standard enough template that can be used for all the 
  cases where the deployment procedure involves similar steps. Consider also that you can handle
  exceptions with variables (see the $loadbalancer_ip usage in puppi/manifests/project/maven.pp)

DEPENDENCIES
The Example42 puppi module aims to be independent and easily droppalo in your set of modules.
In order to do something useful by default it need some packages that you probably already manage:
- nagios plugins for the puppi check,
- curl for some general scripts used in puppi deploy.

Extra elements for check, info and log are automatic included with the relevant application if you use
the Example42 modules.

PROJECT STATUS
Puppi is a work in progress. It has been originally designed to automate deployments in
a specific environment and more project templates have to be written to manage different 
scenarios. It has evolved with some commands useful to quickly understand what's 
happening on the system and how it's configured.
It has greatly broadened its applications and possibilities with the introduction of the mc-puppi
mcollective command and the relevant plugin.
All the puppi commands you can issue to obtain information, check status and manage applications
deployments are now usable via Mcollective.
